AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Example SAM template to make trigger between two S3 buckets,
  DynamoDB, Lambda and API Gateway

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        -
          PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: "*"
              - Action:
                  - dynamodb:*
                Effect: Allow
                Resource: "*"
              - Action:
                  - s3:*
                Effect: Allow
                Resource: "*"
            Version: 2012-10-17
          PolicyName: root

  SourceBucket:
    DependsOn: TriggerLambda
    Properties:
      BucketName: ppshein-source-bucket
      ReplicationConfiguration:
        Role: !GetAtt S3Role.Arn
        Rules:
          -
            Destination:
              Bucket:
                !Join
                  - ""
                  -
                    - "arn:aws:s3:::"
                    - "ppshein-replication-bucket"
              StorageClass: STANDARD
            Id: MyRule1
            Prefix: ""
            Status: Enabled
      VersioningConfiguration:
        Status: Enabled
    Type: "AWS::S3::Bucket"

  ReplicationBucket:
    Properties:
      Code:
        ZipFile:
          !Sub |
            var aws = require('aws-sdk');
            var response = require('cfn-response');
            exports.handler = function(event, context, callback){
                var s3 = new aws.S3({region: event.ResourceProperties.DestBucketRegion});
                if (event.RequestType == 'Create' || event.RequestType == 'Update'){
                    var bucketParams = {
                      Bucket: event.ResourceProperties.DestBucketName,
                    };
                    s3.createBucket(bucketParams, function(err, data) {
                        if (err){
                          response.send(event, context, response.FAILED, err)
                        }
                        else {
                            console.log(data)
                            var versioningParams = {
                              Bucket: event.ResourceProperties.DestBucketName,
                              VersioningConfiguration: {
                                  Status: 'Enabled'
                              }
                            };
                            s3.putBucketVersioning(versioningParams, function(err, data) {
                                if (!err) {
                                  console.log(data)
                                  response.send(event, context, response.SUCCESS, {}, event.destBucketName);
                                  callback(null,'Bucket created!');
                                }
                            });
                        }
                    });
                }
                else if (event.RequestType == 'Delete'){
                    response.send(event, context, response.SUCCESS, {}, event.PhysicalResourceId);
                    callback(null);
                }
            };
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs10.x
      Timeout: 30
    Type: "AWS::Lambda::Function"

  TriggerLambda:
    Type: Custom::LambdaTrig
    Properties:
      ServiceToken: !GetAtt ReplicationBucket.Arn
      DestBucketName: ppshein-replication-bucket
      DestBucketRegion: !Ref "AWS::Region"

  S3Role:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        -  arn:aws:iam::aws:policy/AmazonS3FullAccess
      Path: /
    Type: "AWS::IAM::Role"

  InsertMockDataFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const AWS = require("aws-sdk");
          const response = require("cfn-response");
          const docClient = new AWS.DynamoDB.DocumentClient();
          exports.handler = function(event, context) {
            var params = {
              RequestItems: {
                [ event.ResourceProperties.DynamoDBTableName ]: [
                  {
                    PutRequest: {
                      Item: {
                        "id": "1",
                        "name": "student A",
                        "gender": "male"
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        "id": "2",
                        "name": "student b",
                        "gender": "male"
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        "id": "3",
                        "name": "student c",
                        "gender": "male"
                      }
                    }
                  }
                ]
              }
            };
            docClient.batchWrite(params, function(err, data) { 
              if (err) {
                response.send(event, context, "FAILED", {});
              } else {
                response.send(event, context, "SUCCESS", {});
              }
            });
          };
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs10.x
      Timeout: 60

  SampleTable:
    Type: AWS::DynamoDB::Table
    Description: SampleTable
    Properties:
      TableName: sample_table
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"

  InitializeMockData:
    Type: Custom::InitFunction
    DependsOn: SampleTable
    Properties:
      ServiceToken: !GetAtt InsertMockDataFunction.Arn
      DynamoDBTableName: !Ref SampleTable

  PythonFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Environment:
        Variables:
          TABLE_NAME: !Ref SampleTable
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /
            Method: get

Outputs:
  SamApiURI:
    Description: "API Gateway endpoint URL for Prod stage for SAM Python function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"